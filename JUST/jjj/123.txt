from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.chrome.options import Options
from selenium.common.exceptions import TimeoutException, NoSuchElementException
import time
import os
import re

class JBNUSeleniumDownloader:
    def __init__(self, download_path="./downloads/전북대_취업성공수기", headless=False):
        self.download_path = os.path.abspath(download_path)
        
        # Chrome 옵션 설정
        chrome_options = Options()
        if headless:
            chrome_options.add_argument("--headless")
        chrome_options.add_argument("--no-sandbox")
        chrome_options.add_argument("--disable-dev-shm-usage")
        chrome_options.add_argument("--disable-blink-features=AutomationControlled")
        
        # 다운로드 설정
        prefs = {
            "download.default_directory": self.download_path,
            "download.prompt_for_download": False,
            "download.directory_upgrade": True,
            "safebrowsing.enabled": True
        }
        chrome_options.add_experimental_option("prefs", prefs)
        chrome_options.add_experimental_option("excludeSwitches", ["enable-automation"])
        chrome_options.add_experimental_option('useAutomationExtension', False)
        
        self.driver = webdriver.Chrome(options=chrome_options)
        self.driver.execute_script("Object.defineProperty(navigator, 'webdriver', {get: () => undefined})")
        self.wait = WebDriverWait(self.driver, 15)
        
        # 다운로드 폴더 생성
        if not os.path.exists(self.download_path):
            os.makedirs(self.download_path)
    
    def login(self, username, password):
        """로그인"""
        try:
            print("🔐 로그인 페이지로 이동 중...")
            self.driver.get("https://career.jbnu.ac.kr/career/login.do")
            
            # 아이디 입력
            user_id_input = self.wait.until(
                EC.presence_of_element_located((By.NAME, "userId"))
            )
            user_id_input.clear()
            user_id_input.send_keys(username)
            
            # 비밀번호 입력
            password_input = self.driver.find_element(By.NAME, "userPw")
            password_input.clear()
            password_input.send_keys(password)
            
            # 로그인 버튼 클릭
            login_button = self.driver.find_element(By.XPATH, 
                "//input[@type='submit' or @type='button'][contains(@value, '로그인') or contains(@value, 'LOGIN')]"
            )
            login_button.click()
            
            # 로그인 성공 확인
            time.sleep(3)
            if "로그아웃" in self.driver.page_source or "logout" in self.driver.page_source.lower():
                print("✅ 로그인 성공!")
                return True
            else:
                print("❌ 로그인 실패")
                return False
                
        except Exception as e:
            print(f"❌ 로그인 중 오류: {e}")
            return False
    
    def get_total_pages(self):
        """전체 페이지 수 확인"""
        try:
            self.driver.get("https://career.jbnu.ac.kr/career/21903/subview.do")
            time.sleep(2)
            
            # 페이징 영역에서 마지막 페이지 번호 찾기
            page_selectors = [
                ".paging a",
                ".pagination a", 
                ".page-nav a",
                "a[href*='page=']"
            ]
            
            max_page = 1
            for selector in page_selectors:
                try:
                    page_links = self.driver.find_elements(By.CSS_SELECTOR, selector)
                    for link in page_links:
                        text = link.text.strip()
                        if text.isdigit():
                            max_page = max(max_page, int(text))
                        
                        href = link.get_attribute('href')
                        if href and 'page=' in href:
                            page_match = re.search(r'page=(\d+)', href)
                            if page_match:
                                max_page = max(max_page, int(page_match.group(1)))
                except:
                    continue
            
            print(f"📄 감지된 총 페이지 수: {max_page}")
            return max_page
            
        except Exception as e:
            print(f"⚠️ 페이지 수 확인 중 오류: {e}")
            return 10
    
    def download_page_files(self, page_num):
        """특정 페이지의 모든 파일 다운로드"""
        try:
            # 페이지로 이동
            url = f"https://career.jbnu.ac.kr/career/21903/subview.do?page={page_num}"
            self.driver.get(url)
            time.sleep(2)
            
            # 게시글 링크들 찾기
            post_selectors = [
                "a[href*='subview']",
                "tbody tr a",
                ".board-list a"
            ]
            
            post_links = []
            for selector in post_selectors:
                try:
                    links = self.driver.find_elements(By.CSS_SELECTOR, selector)
                    post_links.extend([link.get_attribute('href') for link in links 
                                     if link.get_attribute('href') and 'subview' in link.get_attribute('href')])
                    if post_links:
                        break
                except:
                    continue
            
            # 중복 제거
            post_links = list(set(post_links))
            print(f"  📝 {len(post_links)}개의 게시글 발견")
            
            downloads_count = 0
            
            for i, post_url in enumerate(post_links, 1):
                try:
                    print(f"    [{i:2d}/{len(post_links)}] 게시글 확인 중...")
                    
                    # 게시글로 이동
                    self.driver.get(post_url)
                    time.sleep(1)
                    
                    # 제목 가져오기
                    try:
                        title_element = self.driver.find_element(By.CSS_SELECTOR, 
                            "h1, h2, h3, .title, .subject, .post-title")
                        title = title_element.text.strip()[:30]
                    except:
                        title = f"게시글_{i}"
                    
                    print(f"      📄 {title}...")
                    
                    # 첨부파일 링크 찾기
                    download_selectors = [
                        "a[href*='download']",
                        "a[onclick*='download']",
                        "a[href*='file']",
                        ".attach a",
                        ".file-list a",
                        ".attachment a"
                    ]
                    
                    download_links = []
                    for selector in download_selectors:
                        try:
                            links = self.driver.find_elements(By.CSS_SELECTOR, selector)
                            download_links.extend(links)
                        except:
                            continue
                    
                    if download_links:
                        print(f"      📎 {len(download_links)}개의 첨부파일 발견")
                        
                        for j, link in enumerate(download_links, 1):
                            try:
                                file_name = link.text.strip() or f"attachment_{j}"
                                print(f"        [{j}] {file_name} 다운로드 중...")
                                
                                # 다운로드 클릭
                                self.driver.execute_script("arguments[0].click();", link)
                                time.sleep(2)  # 다운로드 대기
                                downloads_count += 1
                                print(f"        ✅ 다운로드 완료")
                                
                            except Exception as e:
                                print(f"        ❌ 다운로드 실패: {e}")
                    else:
                        print(f"      📎 첨부파일 없음")
                        
                except Exception as e:
                    print(f"    ❌ 게시글 처리 실패: {e}")
                    continue
            
            return downloads_count
            
        except Exception as e:
            print(f"⚠️ 페이지 {page_num} 처리 중 오류: {e}")
            return 0
    
    def download_all_pages(self, max_pages=None):
        """모든 페이지의 파일 다운로드"""
        print("🔍 전체 페이지 수 확인 중...")
        
        if max_pages is None:
            total_pages = self.get_total_pages()
        else:
            total_pages = max_pages
        
        print(f"📚 총 {total_pages}페이지 처리 예정\n")
        
        total_downloads = 0
        
        for page in range(1, total_pages + 1):
            print(f"📖 === {page}/{total_pages} 페이지 처리 중 ===")
            
            try:
                page_downloads = self.download_page_files(page)
                total_downloads += page_downloads
                print(f"  ✅ {page}페이지 완료 ({page_downloads}개 파일 다운로드)\n")
                
            except Exception as e:
                print(f"  ❌ {page}페이지 처리 실패: {e}\n")
                continue
            
            time.sleep(1)  # 페이지 간 지연
        
        print(f"🎉 === 전체 다운로드 완료 ===")
        print(f"📊 총 {total_downloads}개 파일 다운로드 완료")
        print(f"📁 저장 경로: {self.download_path}")
        
        return total_downloads
    
    def close(self):
        """브라우저 종료"""
        self.driver.quit()

# Selenium 사용 예제
def selenium_main():
    print("=== 전북대학교 취업성공수기 다운로더 (Selenium) ===\n")
    
    username = input("전북대 포털 아이디: ")
    password = input("비밀번호: ")
    
    max_pages_input = input("다운로드할 최대 페이지 수 (엔터: 전체): ").strip()
    max_pages = int(max_pages_input) if max_pages_input.isdigit() else None
    
    headless_input = input("백그라운드 실행? (y/N): ").strip().lower()
    headless = headless_input == 'y'
    
    downloader = JBNUSeleniumDownloader(headless=headless)
    
    try:
        if downloader.login(username, password):
            downloader.download_all_pages(max_pages)
        else:
            print("❌ 로그인 실패")
            
    finally:
        downloader.close()

if __name__ == "__main__":
    # 사용 방법 선택
    print("다운로드 방법을 선택하세요:")
    print("1. requests + BeautifulSoup (빠름)")
    print("2. Selenium (안정적)")
    
    choice = input("선택 (1 또는 2): ").strip()
    
    if choice == "2":
        selenium_main()
    else:
        main()
